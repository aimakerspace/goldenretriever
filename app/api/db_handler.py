"""
Util func to handle pyodbc connections
"""
import datetime
import time
import pyodbc
import tarfile
import numpy as np
import pandas as pd
import pandas.io.sql as pds

from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient, PublicAccess
from fastapi import HTTPException

def get_last_insert_ids(cursor, inserted_iterable = ['single_string']):
    """
    Get ids of last inserted iterable
    
    args:
    ----
        cursor: pyodbc cursor
        inserted_iterable: iterable of last inserted values
    
    Return:
    ------
        last_insert_ids: (list of ints) list of indices of inserted rows
    
    references:
        https://code.google.com/archive/p/pyodbc/wikis/FAQs.wiki#How_do_I_retrieve_autogenerated%2Fidentity_values%3F
        https://dba.stackexchange.com/questions/81604/how-to-insert-values-in-junction-table-for-many-to-many-relationships
        https://stackoverflow.com/questions/2548493/how-do-i-get-the-id-after-insert-into-mysql-database-with-python
    """
    try:
        cursor.execute( "SELECT @@IDENTITY")
        last_insert_id = cursor.fetchall()
        last_insert_id = int(last_insert_id[0][0])
    except Exception as e:
        last_insert_id = cursor.lastrowid

    last_insert_ids = [i for i in range(last_insert_id, last_insert_id-len(inserted_iterable), -1)][::-1]

    return last_insert_ids


def extract_qa_pair_based_on_idx(lst, idx=0): 
    return [item[idx] for item in lst] 


def get_kb_id_ref(conn):
    """
    Utility function to get references from SQL. 
    The returned objects conveniently identify users based on kb_name or user hashkey
    """
    # get kb_names to kb_id
    kb_ref = pds.read_sql("""SELECT id, kb_name, directory_id  FROM dbo.kb_raw""", conn)
    get_kb_dir_id = kb_ref.loc[:,['kb_name', 'directory_id']].set_index('kb_name').to_dict()['directory_id']
    get_kb_raw_id = kb_ref.loc[:,['kb_name', 'id']].set_index('kb_name').to_dict()['id']

    return get_kb_dir_id, get_kb_raw_id


def get_permissions(conn):
    """
    Get user permissions to allow access only to allowed KBs
    The returned df maps user hashkey with authorized kb_name(s)
    """
    # get kb permissions
    permissions = pds.read_sql("SELECT hashkey, kb_name, user_id FROM dbo.users \
                                LEFT JOIN dbo.kb_directory ON dbo.users.id = dbo.kb_directory.user_id \
                                LEFT JOIN kb_raw ON dbo.kb_directory.id = dbo.kb_raw.directory_id \
                                ", conn)
    
    permissions = pd.DataFrame(np.array(permissions), columns = ['hashkey', 'kb_name', 'user_id']).set_index('hashkey')
    
    return permissions


def ensure_connection(conn, conn_path):
    """
    Ensure that pyodbc connection is still working

    https://stackoverflow.com/questions/10847703/check-if-pyodbc-connection-is-open-or-closed
    https://stackoverflow.com/questions/41473137/pyodbc-how-to-retry-to-recover-from-transient-errors
    """
    retry_count = 0
    error_string = ''

    while retry_count < 3:
        try:
            cursor = conn.cursor()
            conn.execute("SELECT * FROM dbo.users").fetchall()
            return conn, cursor
        except Exception as e:    
            # if e.__class__ == pyodbc.OperationalError:   
            # make the SQL connection and cursor
            print(f"retry count: {retry_count}")
            retry_count += 1
            time.sleep(retry_count)
            conn = pyodbc.connect(open(conn_path, 'r').read())
            cursor = conn.cursor()
            error_string = str(e)
    else:
        raise HTTPException(status_code=500, detail=f"pyodbc error: {error_string}")
